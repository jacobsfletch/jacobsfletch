include ../mixins/flash-messages
include ../mixins/media/lightswitch

doctype html
html
    head
        //- Initial HTML configuration
        meta(charset="utf-8")
        meta(http-equiv="X-UA-Compatible" content="IE=edge")
        //- Link meta-data
        title #{global.meta.description}
        meta(name="description" content=global.meta.description)
        //- Define the viewport
        meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")
        meta(name="apple-mobile-web-app-title" content=global.meta.title)
        //- Fullscreen Safari on startup from home screen on Apple and Android devices
        //- meta(name="apple-mobile-web-app-capable" content="yes")
        //- meta(name="mobile-web-app-capable" content="yes")
        //- Link browser favicon
        link(rel="icon" type="image/png" href=global.favicon.url)
        //- Link home screen app icon on Apple devices
        link(rel="apple-touch-icon" href=global.icon.url)
        //- Link startup image on Apple devices
        link(rel="apple-touch-startup-image" href=global.startupImg.url)
        //- Link Sassafras project styles
        link(rel="stylesheet" type="text/css" href="/css/jacobsfletch.min.css")
        if user && user.canAccessKeystone
            link(href="/keystone/styles/content/editor.min.css" rel="stylesheet")
        block css
        block head
    body
        block intro
        input#dock(type='checkbox')
        input#explore(type='checkbox')
        input#filter(type='checkbox')
        input#portfolio(type='checkbox')
        .app-main
            header.app-header
                .wrapper
                    a.app-title(href='/')
                        h1 jacobsfletch
                    label.tool-toggle(for='dock')
                        .tool-media
                            +lightSwitch()
            footer.app-footer
                .container-dock
                    .container-header
                        .container-title
                            p this website is 100% handmade
                    .container-body
                        nav.menu-vertical
                            ul.menu-body
                                each link in navLinks
                                    li.menu-body-part.btn-main(class=(section == link.key ? 'active' : null))
                                        a.btn-title(target=link.target href=link.href)= link.label
                                            |  >
                        nav.menu-vertical
                            .menu-header
                                .menu-title
                                    h6 coming soon
                            ul.menu-body
                                li.menu-body-part.btn-main
                                    a.btn-title my blog
                                li.menu-body-part.btn-main
                                    a.btn-title my shop
            .app-body
                block appBody

        // script(src='/js/jacobsfletch.min.js')

        script.
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
            ga('create', 'UA-72591985-3', 'auto');
            ga('send', 'pageview');

            scrollAnimate = function(screenElement, startElement, checkboxElement) {
                var screenEl = document.getElementById(screenElement);
                var panelBody = document.getElementById('panelBody');
                var startEl = document.getElementById(startElement);
                var loaderContainer = document.getElementById('loaderContainer');
                var circle = document.getElementById("circle");
                var loaderTitle = document.getElementById("loaderTitle");
                var scrollTop = 0;
                var offsetHeight = startEl.offsetHeight;
                var paddingBottom = parseInt(window.getComputedStyle(startEl, null).getPropertyValue('padding-bottom'), 10);
                var height = offsetHeight - paddingBottom;
                var checkbox = document.getElementById(checkboxElement); // The Checkbox
                var currentPercentage = 0;
                var displacement = 0;
                var threshold = 150;
                var currentRatio = 0;
                var strokeWidth = parseInt(getComputedStyle(panelLoader).getPropertyValue("stroke-width"), 10) * 2; // Parse Two Decimals In, Double to Accomodate Both Sides of Circle
                var loaderWidth = parseInt(getComputedStyle(panelLoader).getPropertyValue("width"), 10); // Parse Two Decimals In

                window.addEventListener('resize', updateVariables, false);
                screenEl.addEventListener('touchend', endHandler, false);
                screenEl.addEventListener('touchcancel', endHandler, false);
                screenEl.addEventListener('scroll', scrollHandler, false);
                
                    
                function updateVariables() {
                    offsetHeight = startEl.offsetHeight;
                    paddingBottom = parseInt(window.getComputedStyle(startEl, null).getPropertyValue('padding-bottom'), 10);
                }
                
                function resetStyles() {
                    screenEl.scrollTop = 0;
                    startEl.removeAttribute('style');
                    loaderContainer.removeAttribute('style'); // Remove panelLoader Styles
                }
                
                function initSpinner(currentRatio, scrollTop) {
                    //window.requestAnimationFrame(function() {
                        circumference = (loaderWidth - strokeWidth) * Math.PI; // Calculate Loader Circumference
                        loaderContainer.style.display = 'flex';
                        loaderContainer.style.height = offsetHeight - scrollTop + 'px';
                        loaderContainer.style.transform = 'translateY(' + scrollTop + 'px)';
                        circle.style.strokeDasharray = circumference; // Style dash-array
                        circle.style.strokeDashoffset = circumference * (1 - currentRatio); // Style dash-offset
                        if (currentRatio > 0) {
                            currentPercentage = Math.ceil(currentRatio * 100); // Calculate Ratio Difference
                            loaderTitle.innerHTML = "<p>" + currentPercentage + "%</p>"; // Start Percentage Count
                        }
                    //});
                }

                function scrollHandler() {
                    //setTimeout(endHandler, 3000);
                    if (!checkbox.checked) {
                    scrollTop = screenEl.scrollTop;
                        if (scrollTop >= threshold) {
                            panelBody.style.overflow = 'scroll';
                            checkbox.checked = 'true';
                            resetStyles();
                        } else if (scrollTop < 1) {
                            resetStyles();
                        } else {
                            startEl.style.visibility = 'hidden';
                            currentRatio = scrollTop / threshold;
                            initSpinner(currentRatio, scrollTop);
                        }
                    } else {
                        resetStyles();
                    }
                }

                function endHandler() {
                    if (scrollTop <= threshold) {
                        screenEl.scrollTop = 0;
                    } else {
                        resetStyles();
                    }
                }
            }

            mediaToggler = function() {
                // Init variables
                var array = [];
                // Init Element Queries
                var wallBodyPart = document.querySelectorAll('.wall-body-part');
                var toolExpand = document.querySelectorAll('.tool-expand');
                var toolShrink = document.querySelectorAll('.tool-shrink');

                shrinkMedia = function(i, array) { // Shrink the media
                    for (var j = 0; j <= array.length; j++) { // Loop through the spliced array
                        if (wallBodyPart[j] !== wallBodyPart[i]) { // Select all in array except [i]
                            wallBodyPart[j].removeAttribute('style'); // Remove styles from all except [i]
                        }
                    }
                    wallBodyPart[i].removeAttribute('style'); // Remove styles from wallBodyPart
                    toolExpand[i].removeAttribute('style'); // Remove styles from toolExpand
                    toolShrink[i].removeAttribute('style'); // Remove styles from toolShrink
                    array.splice(i, 0, i); // Splice i back into the array
                }

                expandMedia = function(i, array) { // Expand the media
                    array.splice(i, 1); // Splice i from the array
                    for (var j = 0; j <= array.length; j++) { // Loop through the spliced array
                        if (wallBodyPart[j] !== wallBodyPart[i]) { // Select all in array except [i]
                            wallBodyPart[j].style.display = 'none'; // Hide all except [i]
                        }
                    }
                    wallBodyPart[i].style.width = '100%'; // Full width [i]
                    wallBodyPart[i].style.margin = '0'; // Remove margins from [i]
                    toolExpand[i].style.display = 'none'; // Hide toolExpand
                    toolShrink[i].style.display = 'block'; // Make visible toolShrink
                }

                for (var i = 0; i < toolExpand.length; i++) { // Loop all toolExpand elements
                    array.push(i); // Create numbered array of total toolExpand elements
                    toolExpand[i].addEventListener('click', expandMedia.bind(this, i, array)); // Add click event to toolExpand and bind index
                    toolShrink[i].addEventListener('click', shrinkMedia.bind(this, i, array)); // Add click event to toolShrink and bind index
                }
            }

        block js
