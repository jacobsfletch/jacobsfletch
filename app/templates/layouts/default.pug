include ../mixins/flash-messages
include ../mixins/media/lightswitch

doctype html
html
    head
        //- Initial HTML configuration
        meta(charset="utf-8")
        meta(http-equiv="X-UA-Compatible" content="IE=edge")
        //- Link meta-data
        title #{global.meta.description}
        meta(name="description" content=global.meta.description)
        //- Define the viewport
        meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")
        meta(name="apple-mobile-web-app-title" content=global.meta.title)
        //- Fullscreen Safari on startup from home screen on Apple and Android devices
        //- meta(name="apple-mobile-web-app-capable" content="yes")
        //- meta(name="mobile-web-app-capable" content="yes")
        //- Link browser favicon
        link(rel="icon" type="image/png" href=global.favicon.url)
        //- Link home screen app icon on Apple devices
        link(rel="apple-touch-icon" href=global.icon.url)
        //- Link startup image on Apple devices
        link(rel="apple-touch-startup-image" href=global.startupImg.url)
        //- Link Sassafras project styles
        link(rel="stylesheet" type="text/css" href="/css/jacobsfletch.min.css")
        if user && user.canAccessKeystone
            link(href="/keystone/styles/content/editor.min.css" rel="stylesheet")
        block css
        block head
    body
        block intro
        input#dock(type='checkbox')
        input#explore(type='checkbox')
        input#filter(type='checkbox')
        input#portfolio(type='checkbox')
        .app-main
            header.app-header
                .wrapper
                    a.app-title(href='/')
                        h1 jacobsfletch
                    label.tool-toggle(for='dock')
                        .tool-media
                            +lightSwitch()
            footer.app-footer
                .container-dock
                    .container-header
                        .container-title
                            p this website is 100% handmade
                    .container-body
                        nav.menu-vertical
                            ul.menu-body
                                each link in navLinks
                                    li.menu-body-part.btn-main(class=(section == link.key ? 'active' : null))
                                        a.btn-title(target=link.target href=link.href)= link.label
                                            |  >
                        nav.menu-vertical
                            .menu-header
                                .menu-title
                                    h6 coming soon
                            ul.menu-body
                                li.menu-body-part.btn-main
                                    a.btn-title my blog
                                li.menu-body-part.btn-main
                                    a.btn-title my shop
            .app-body
                block appBody

        // script(src='/js/jacobsfletch.min.js')

        script.
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
            ga('create', 'UA-72591985-3', 'auto');
            ga('send', 'pageview');

            scrollAnimate = function(selector, parent, input) {
                // Init Element Queries
                var panel = document.getElementById(selector);
                var originalOffset = panel.offsetTop;
                var loaderTitle = document.getElementById("loaderTitle");
                var panelBackground = document.getElementById(parent);
                var circle = document.getElementById("circle");
                var loaderContainer = document.getElementById("loaderContainer");
                // Init Variables
                var originalOffset = panel.offsetTop;
                var desktopThreshold = 300;
                var mobileThreshold = 66;
                var touchDistance = 0;
                var wheelDistance = 0;
                var currentPercentage = 0;
                var displacement = 0;
                var wheelRatio = 1;
                var touchRatio = 3;
                var start = 0;
                var timeout = 1000;
                var elapsedTime = 0;
                var strokeWidth = parseInt(getComputedStyle(panelLoader).getPropertyValue("stroke-width"), 10) * 2; // Parse Two Decimals In, Double to Accomodate Both Sides of Circle
                var loaderWidth = parseInt(getComputedStyle(panelLoader).getPropertyValue("width"), 10); // Parse Two Decimals In
                var panelHeight = parseInt(getComputedStyle(panelBackground).getPropertyValue("height"), 10); // Parse Two Decimals In
                var deltaY = 0;

                // Init Event Listeners
                window.addEventListener("wheel", moveHandler, false);
                window.addEventListener("touchstart", startHandler, false);
                window.addEventListener("touchmove", moveHandler, false);
                window.addEventListener("touchend", endHandler, false);

                function timer() {
                    reset();
                }

                function reset() {
                    panel.removeAttribute('style'); // Reset panel Styles
                    panelLoader.removeAttribute('style'); // Remove panelLoader Styles
                    loaderContainer.removeAttribute('style'); // Reset loaderContainer Styles
                    panelBackground.removeAttribute('style'); // Reset panelBackground Styles
                    circle.removeAttribute('style'); // Reset circle Styles
                    loaderContainer.removeAttribute('style'); // Reset loaderContainer Styles
                    loaderTitle.innerHTML = ""; // Remove Subtitle
                    wheelDistance = 0; // Reset wheelDistance
                    deltaY = 0; // Reset FireFox Delta
                }

                function initSpinner(currentPercentage, displacement) {
                    array = (loaderWidth - strokeWidth) * Math.PI; // Calculate Loader Circumference
                    currentRatio = 1 - (currentPercentage / 100); // Calculate Ratio Difference
                    circle.style.strokeDasharray = array; // Style dash-array
                    circle.style.strokeDashoffset = array * currentRatio; // Style dash-offset
                    loaderContainer.style.height = parseInt(loaderContainer.offsetHeight, 10) - displacement + "px";
                }

                function startHandler(event) {
                    start = event.touches[0].pageY;
                }

                function moveHandler(event) {
                    checkbox = document.getElementById(input); // The Checkbox
                    if(!checkbox.checked) { // Checkbox Unchecked
                        if(event.touches) { // Touch Event
                            touchDistance = (start - event.touches[0].pageY); // Scroll Amount
                            currentPercentage = Math.floor((touchDistance / mobileThreshold) * 100); // Calculate Respective Percentage
                            displacement = touchDistance * touchRatio; // Integrate Ratio
                            currentOffset = (originalOffset - displacement); // Calculate Offset
                        }
                        if(event.wheelDeltaY || event.deltaY) { // Wheel Event
                            wheelDelta = event.wheelDeltaY || event.deltaY; // Conditional Variable to Accomodate FireFox
                            if(event.wheelDeltaY) { // If Not Firefox
                                wheelDistance = wheelDistance + (wheelDelta * -1); // Calculate Wheel Distance
                            } else { // If Firefox
                                deltaY = deltaY + wheelDelta; // Delta Ticker
                                wheelDistance = deltaY * 10; // Multiply by a Number - FireFox Increments by Only One
                            }
                            currentPercentage = Math.floor((wheelDistance / desktopThreshold) * 100); // Calculate Respective Percentage
                            displacement = wheelDistance * wheelRatio; // Integrate Ratio
                            currentOffset = (originalOffset - (wheelDistance * wheelRatio)); // Calculate Offset
                            if(currentPercentage <= 0) { // If Fully Scrolled Down
                                reset(); // Reset Styles
                            }
                        }
                        if(currentPercentage > 0) { // If Not Fully Scrolled Down
                            panel.style.transition = "none";
                            loaderTitle.innerHTML = "<p>" + currentPercentage + "%</p>"; // Start Percentage Count
                            if(currentPercentage < 100) { // Threshold Not Met
                                panel.style.top = currentOffset + "px"; // Animate Panel
                                panelBackground.style.display = "none"; // Remove Background
                                loaderContainer.style.cssText = "display: flex; display: -webkit-flex;"; // Insert Display Style
                                initSpinner(currentPercentage, displacement);
                            } else { // Threshold Met
                                checkbox.checked = true; // Check Checkbox
                                reset(); // Reset Styles
                            }
                        }
                    }
                }

                function endHandler(event) { // End of Event
                    if(!checkbox.checked) { // Checkbox Unchecked
                        reset(); // Reset Styles
                    }
                }

            }

            mediaToggler = function() {
                // Init variables
                var array = [];
                // Init Element Queries
                var wallBodyPart = document.querySelectorAll('.wall-body-part');
                var toolExpand = document.querySelectorAll('.tool-expand');
                var toolShrink = document.querySelectorAll('.tool-shrink');

                shrinkMedia = function(i, array) { // Shrink the media
                    for (var j = 0; j <= array.length; j++) { // Loop through the spliced array
                        if (wallBodyPart[j] !== wallBodyPart[i]) { // Select all in array except [i]
                            wallBodyPart[j].removeAttribute('style'); // Remove styles from all except [i]
                        }
                    }
                    wallBodyPart[i].removeAttribute('style'); // Remove styles from wallBodyPart
                    toolExpand[i].removeAttribute('style'); // Remove styles from toolExpand
                    toolShrink[i].removeAttribute('style'); // Remove styles from toolShrink
                    array.splice(i, 0, i); // Splice i back into the array
                }

                expandMedia = function(i, array) { // Expand the media
                    array.splice(i, 1); // Splice i from the array
                    for (var j = 0; j <= array.length; j++) { // Loop through the spliced array
                        if (wallBodyPart[j] !== wallBodyPart[i]) { // Select all in array except [i]
                            wallBodyPart[j].style.display = 'none'; // Hide all except [i]
                        }
                    }
                    wallBodyPart[i].style.width = '100%'; // Full width [i]
                    wallBodyPart[i].style.margin = '0'; // Remove margins from [i]
                    toolExpand[i].style.display = 'none'; // Hide toolExpand
                    toolShrink[i].style.display = 'block'; // Make visible toolShrink
                }

                for (var i = 0; i < toolExpand.length; i++) { // Loop all toolExpand elements
                    array.push(i); // Create numbered array of total toolExpand elements
                    toolExpand[i].addEventListener('click', expandMedia.bind(this, i, array)); // Add click event to toolExpand and bind index
                    toolShrink[i].addEventListener('click', shrinkMedia.bind(this, i, array)); // Add click event to toolShrink and bind index
                }
            }

        block js
