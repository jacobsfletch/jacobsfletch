include ../mixins/flash-messages
include ../mixins/media/lightswitch

doctype html
html
    head
        //- Initial HTML configuration
        meta(charset="utf-8")
        meta(http-equiv="X-UA-Compatible" content="IE=edge")
        //- Link meta-data
        title #{global.meta.description}
        meta(name="description" content=global.meta.description)
        //- Define the viewport
        meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0")
        meta(name="apple-mobile-web-app-title" content=global.meta.title)
        //- Fullscreen Safari on startup from home screen on Apple and Android devices
        //- meta(name="apple-mobile-web-app-capable" content="yes")
        //- meta(name="mobile-web-app-capable" content="yes")
        //- Link browser favicon
        link(rel="icon" type="image/png" href=global.favicon.url)
        //- Link home screen app icon on Apple devices
        link(rel="apple-touch-icon" href=global.icon.url)
        //- Link startup image on Apple devices
        link(rel="apple-touch-startup-image" href=global.startupImg.url)
        //- Link Sassafras project styles
        link(rel="stylesheet" type="text/css" href="/css/jacobsfletch.min.css")
        if user && user.canAccessKeystone
            link(href="/keystone/styles/content/editor.min.css" rel="stylesheet")
        block css
        block head
    body
        block intro
        input#dock(type='checkbox')
        input#explore(type='checkbox')
        input#filter(type='checkbox')
        .app-main
            header.app-header
                .wrapper
                    a.app-title(href='/')
                        h1 jacobsfletch
                    label.tool-toggle(for='dock')
                        .tool-media
                            +lightSwitch()
            .app-body
                block appBody
            footer.app-footer
                .container-dock
                    .container-header
                        .container-title
                            p this website is 100% handmade
                    .container-body
                        nav.menu-vertical
                            ul.menu-body
                                each link in navLinks
                                    li.menu-body-part.btn-main(class=(section == link.key ? 'active' : null))
                                        a.btn-title(target=link.target href=link.href)= link.label
                                            |  >
                        nav.menu-vertical
                            .menu-header
                                .menu-title
                                    h6 coming soon
                            ul.menu-body
                                li.menu-body-part.btn-main
                                    a.btn-title my blog
                                li.menu-body-part.btn-main
                                    a.btn-title my shop
        // script(src='/js/jacobsfletch.min.js')
        script.
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
            ga('create', 'UA-72591985-3', 'auto');
            ga('send', 'pageview');
            
            preventDefault = function(event) {
                event.preventDefault();
            }
            
            window.addEventListener('touchmove', preventDefault);
            window.addEventListener('wheel', preventDefault);
            
            var touchStart = 0;
                scrollDistance = 0;
            
            function touchStartHandler(event) {
                touchStart = event.touches[0].pageY;
            }
                            
            function scrollHandler(event) {
                scrollDistance = event.deltaY ? event.deltaY : event.touches ? (touchStart - event.touches[0].pageY) : null;
                touchStart = event.touches ? event.touches[0].pageY : null;
            }
            
            ////////////////////////////////////////////////////////////////////////////

            // scrollEnabler

            ////////////////////////////////////////////////////////////////////////////
            
            scrollEnabler = function(event, element) {
                var elementCurrentScroll = panelBody.scrollTop;
                    elementScrollHeight = element.scrollHeight;
                    elementClientHeight = element.clientHeight;
                    fullBodyScroll = elementScrollHeight - elementClientHeight;
                if (elementCurrentScroll <= fullBodyScroll && elementCurrentScroll >= 0) {
                    element.scrollTop = elementCurrentScroll + scrollDistance;
                }
            }
            
            ////////////////////////////////////////////////////////////////////////////

            // scrollAnimate

            ////////////////////////////////////////////////////////////////////////////

            scrollAnimate = function(screen, checkboxElement) {
                
                var checkbox = document.getElementById(checkboxElement);
                    screen = document.querySelector(screen);
                    start = screen.querySelector('.start');
                    explore = screen.querySelector('.explore');
                    panelBody = explore.querySelector('.panel-body');
                    panelScroll = 0;
                    panelIsFullyScrolledUp = true;
                    currentRatio = 0;
                    panelCurrentScroll = 0;

                fetchVariables = function() {
                    var exploreBoundingTop = explore.getBoundingClientRect().top;
                        screenBoundingTop = screen.getBoundingClientRect().top;
                        exploreTop = Math.round(exploreBoundingTop - screenBoundingTop);
                        originalExploreTop = exploreTop;
                }
                
                window.addEventListener('resize', function(event) {
                    checkbox.checked = false;
                    explore.removeAttribute('style');
                    start.removeAttribute('style');
                    start.classList.remove('active');
                    explore.classList.remove('active');
                    panelBody.classList.remove('active');
                    panelBody.scrollTop = 0 + 'px';
                    fetchVariables();
                });
                
                screen.addEventListener('wheel', function(event) {
                    scrollHandler(event);
                    scrollAnimation(event);
                });
                
                screen.addEventListener('touchmove', function(event) {
                    scrollHandler(event);
                    scrollAnimation(event);
                });
                
                screen.addEventListener('touchstart', touchStartHandler);
                
                function scrollAnimation(event) {
                    panelCurrentScroll = panelBody.scrollTop;
                    panelIsFullyScrolledUp = panelCurrentScroll == 0; 
                    if (panelIsFullyScrolledUp) {
                        expectedScroll = exploreTop + -scrollDistance;
                        exploreTop = (expectedScroll >= originalExploreTop) ? originalExploreTop : (expectedScroll <= 0) ? 0 : (exploreTop + -scrollDistance);
                        explore.style.top = exploreTop + 'px';
                        currentRatio = Math.round(100 * (exploreTop / originalExploreTop)) / 100;
                        start.style.opacity = currentRatio;
                    }
                                                        
                    if (exploreTop == 0) {
                        checkbox.checked = true;
                        start.classList.add('active');
                        explore.classList.add('active');
                        panelBody.classList.add('active');
                        scrollEnabler(event, panelBody);
                    } else if (exploreTop == originalExploreTop) {
                        checkbox.checked = false;
                        start.classList.remove('active');
                        explore.classList.remove('active');
                        panelBody.classList.remove('active');
                    }
                }
                
                fetchVariables();
                
            }

            ////////////////////////////////////////////////////////////////////////////

            // initLoader

            ////////////////////////////////////////////////////////////////////////////

            initLoader = function() {
                // Initiate Global Reference Variables via the First element
                // Calculate for Circumference
                var loaders = document.getElementsByClassName('utility-loader');
                var firstLoader = loaders[0];
                var originalWidth = parseInt(firstLoader.getElementsByTagName('svg')[0].getAttribute('width'), 10);
                var computedWidth = parseInt(getComputedStyle(firstLoader).getPropertyValue('width'), 10);
                var differenceRatio = computedWidth / originalWidth;
                var circumference = firstLoader.getElementsByTagName('path')[0].getTotalLength() * differenceRatio;
                // Initiate Variables
                var strokeDasharray = parseInt(getComputedStyle(firstLoader).getPropertyValue("stroke-dasharray"), 10); // Parse Two Decimals In, Double to Accomodate Both Sides of Circle
                var difference = circumference - strokeDasharray;
                var ticker = circumference;

                repeatLoader = function() {
                    ticker = ticker + circumference;
                    startLoader(repeatLoader);
                }

                startLoader = function(callback) {
                    for (i = 0; i < loaders.length; i++) {
                        var loader = loaders[i];
                        loader.style.strokeDasharray = strokeDasharray + ',' + difference;
                        loader.style.strokeDashoffset = ticker;
                    }
                    firstLoader.addEventListener('transitionend', callback);
                }
                startLoader(repeatLoader);
            }

            ////////////////////////////////////////////////////////////////////////////

            // responsiveImages

            ////////////////////////////////////////////////////////////////////////////

            responsiveImages = function(cardName) { 
                var dppi = window.devicePixelRatio; 
                var cards = document.getElementsByClassName(cardName);
                var status = 'all';    
                var currentImg = null;
                var prevImgWidth = 0;
                var scrollContainer = document.querySelector('.panel-body');
                var scrollPosition = 0;

                finish = function(cardImg) {
                    setTimeout(function() {
                        cardImg.classList.remove('is-inactive');
                    }, 500)
                }

                loadImage = function(cardImg, otherCardImgs) {
                    var imgWidth = Math.ceil(parseInt(getComputedStyle(cardImg, null).getPropertyValue('width'), 10));
                    if (imgWidth != prevImgWidth) { // Skip the image transormation if it is the same size as the prior
                        var newWidth = imgWidth * dppi;
                        if (cardImg.dataset.src) {
                            var imgSrc = cardImg.dataset.src;
                            var srcParse = imgSrc.split('upload/');
                            for (var j = 0; j < srcParse.length; j++) {
                                var srcFirst = srcParse[0];
                                var srcLast = srcParse[1];
                                var srcType = srcLast.split('.')[1];
                                if(srcType === 'jpg') {
                                    var imgSrc = srcFirst + 'upload/w_' + newWidth + '/' + srcLast;
                                }
                                cardImg.src = imgSrc;
                            }
                        }
                    } else {
                        finish(cardImg);
                        for (var k = 0; k < otherCardImgs.length; k++) {
                            finish(otherCardImgs[k]);
                        }
                    }
                }

                hoverReplicate = function() {
                    for (var i = 0; i < cards.length; i++) {
                        var card = cards[i];
                        if(card.classList.contains('hover')) {
                            card.classList.toggle('hover');
                        }
                    }
                    this.classList.toggle('hover');
                }

                queryMedia = function(cardImg, otherCardImgs) {
                    if (status === 'all') {
                        for (var i = 0; i < cards.length; i++) {
                            var card = cards[i];
                            var cardImg = card.querySelector('img');
                            cardImg.classList.add('is-inactive');
                            loadImage(cardImg, otherCardImgs);
                        }
                    } else if (status === 'single') {
                        cardImg.classList.add('is-inactive');
                        loadImage(cardImg, otherCardImgs);
                    }
                }

                toggleMedia = function(card, cardImg, cardParent, otherCards, otherCardImgs) {
                    prevImgWidth = Math.ceil(parseInt(getComputedStyle(cardImg, null).getPropertyValue('width'), 10));
                    if (!cardParent.classList.contains('is-active')) {
                        scrollPosition = scrollContainer.scrollTop;
                    }
                    for (var i = 0; i < otherCards.length; i++) {
                        otherCards[i].parentNode.classList.toggle('is-inactive');
                        otherCards[i].classList.add('is-inactive');
                    }
                    cardParent.classList.toggle('is-active');
                    card.querySelector('.tool-shrink').classList.toggle('is-inactive');
                    if (status === 'all') {
                        status = 'single';
                        currentImg = cardImg;
                    } else if (status === 'single') {
                        status = 'all';
                        currentImg = null;
                    }
                    for (var k = 0; k < otherCardImgs.length; k++) {
                        otherCardImgs[k].classList.add('is-inactive');
                    }
                    if (!cardParent.classList.contains('is-active')) {
                        scrollContainer.scrollTop = scrollPosition;
                    } else {
                        scrollContainer.scrollTop = 0;
                    }
                    queryMedia(cardImg, otherCardImgs);
                }

                for (var i = 0; i < cards.length; i++) {
                    (function() {
                        var card = cards[i];
                        var otherCards = [];
                        var otherCardImgs = [];
                        for (var j = 0; j < cards.length; j++) {
                            if (!cards[j].isSameNode(card)) {
                                otherCards.push(cards[j]);
                                var otherCardImg = cards[j].querySelector('img');
                                if (otherCardImg) {
                                    otherCardImgs.push(otherCardImg);
                                }
                            }
                        }
                        var cardImg = card.querySelector('img');
                        var cardParent = card.parentNode;
                        var toolExpand = card.querySelector('.tool-expand');
                        var toolShrink = card.querySelector('.tool-shrink');
                        var tools = [];
                        if (toolExpand && toolShrink) {
                            tools.push(toolExpand, toolShrink);
                        }
                        if (cardImg) {
                            cardImg.addEventListener('load', function() {
                                finish(cardImg);
                                for (var k = 0; k < otherCardImgs.length; k++) {
                                    finish(otherCardImgs[k]);
                                }
                            });
                        }
                        card.addEventListener('touchstart', hoverReplicate);
                        if (tools) {
                            for(var t = 0; t < tools.length; t++) {
                                var tool = tools[t];
                                tool.addEventListener('click', function() {
                                    toggleMedia(card, cardImg, cardParent, otherCards, otherCardImgs);
                                });
                            }
                        }
                    })();
                }

                window.addEventListener('resize', function() {
                    queryMedia(currentImg);
                });

                initLoader();
                queryMedia(status);
            }

        block js
